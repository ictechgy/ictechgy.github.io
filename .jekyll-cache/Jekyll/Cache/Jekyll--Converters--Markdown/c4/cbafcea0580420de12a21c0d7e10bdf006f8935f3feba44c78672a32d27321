I"b#<p>Swift를 다시 공부하던 도중 기록하면 좋을만한 부분이 있어서 작성한다.</p>

<p>Any?, AnyObject? 같은 옵셔널이 아닌 Any, AnyObject 등에는 nil을 직접적으로 넣을 수 없다. 하지만 아래와 같은 경우에는 가능하다.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="k">let</span> <span class="nv">b</span><span class="p">:</span> <span class="kt">Any</span> <span class="o">=</span> <span class="n">a</span> <span class="k">as</span> <span class="kt">Any</span>   <span class="c1">//syntax error가 뜨지 않는다. 'Any?'로 쓰십시오!라고 뜰 줄 알았는데..</span>

<span class="c1">//또는</span>
<span class="k">let</span> <span class="nv">c</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="k">let</span> <span class="nv">d</span><span class="p">:</span> <span class="kt">AnyObject</span> <span class="o">=</span> <span class="n">c</span> <span class="k">as</span> <span class="kt">AnyObject</span>
</code></pre></div></div>
<p>b는 실질적으로 nil이지만 nil이 아닌 것처럼 보인다. 이런 부분에 있어 유의하도록 하자. (d도 마찬가지. 값 자체가 복사됐느냐 참조가 복사됐느냐의 차이는 존재)</p>

<p> </p>

<p>위와 같은 경우가 있을 수 있다는 것은 <a href="https://github.com/ReactiveX/RxSwift/blob/main/RxExample/Extensions/CLLocationManager%2BRx.swift">RxSwift Github - ‘CLLocationManager+Rx’ Example</a>을 통해 알았다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">func</span> <span class="n">castOptionalOrThrow</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">resultType</span><span class="p">:</span> <span class="kt">T</span><span class="o">.</span><span class="k">Type</span><span class="p">,</span> <span class="n">_</span> <span class="nv">object</span><span class="p">:</span> <span class="kt">Any</span><span class="p">)</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">T</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">if</span> <span class="kt">NSNull</span><span class="p">()</span><span class="o">.</span><span class="nf">isEqual</span><span class="p">(</span><span class="n">object</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// object == nil 로 조건문을 바꾸면 warning 표시.</span>
        <span class="k">return</span> <span class="kc">nil</span>
    <span class="p">}</span>
		 <span class="c1">//NSNull: nil을 허용하지 않는 콜렉션에서 null value를 대표하는 싱글톤 오브젝트</span>
     <span class="c1">//nil이지만 nil이 아닌것처럼 쓸 수 있다는 건가?</span>

    <span class="k">guard</span> <span class="k">let</span> <span class="nv">returnValue</span> <span class="o">=</span> <span class="n">object</span> <span class="k">as?</span> <span class="kt">T</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="kt">RxCocoaError</span><span class="o">.</span><span class="nf">castingError</span><span class="p">(</span><span class="nv">object</span><span class="p">:</span> <span class="n">object</span><span class="p">,</span> <span class="nv">targetType</span><span class="p">:</span> <span class="n">resultType</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">returnValue</span>
<span class="p">}</span>
</code></pre></div></div>
<p>링크 맨 밑에 위와 같은 함수가 있는데 ‘nil일 수 있는 인자를 Any?가 아닌 Any타입의 object로 받는 것’과 내부에서 ‘nil 체크를 NSNull().isEqual()로 하는 것’을 보고.. 처음에 굉장히 혼란스러웠다. 왜 object 파라미터가 Any?타입이 아닌 Any일까 하면서.. 물론 외부에서 넘어오는 것 자체가 [Any]에서 하나를 고른 Any이기는 하지만.</p>

<p>delegate.methodInvoked()에 의해 메소드 파라미터들은 Any로 캐스팅되고 [Any] 배열로 반환된다. 따라서 특정 파라미터는 Any타입이라고 보여도 사실은 nil일 수 있다. (이를테면 CLLocationManagerDelegate - didFinishDeferredUpdatesWithError의 두번째 파라미터는 Error? 옵셔널인데, Any로 캐스팅되어도 사실 nil일 수 있다는 것) <br />
왜 methodInvoked()에 의해 반환되는 Observable시퀀스가 Observable&lt;Any?&gt;가 아닌 Observable&lt;Any&gt;인걸까?</p>

<p> </p>
<h1 id="다른-타입캐스팅업캐스팅에도-되는걸까">다른 타입캐스팅(업캐스팅)에도 되는걸까?</h1>
<p>결론부터 말하자면 안된다. Any와 AnyObject에만 된다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//struct 테스트</span>
<span class="kd">protocol</span> <span class="kt">ParentProtocol</span> <span class="p">{}</span>
<span class="kd">struct</span> <span class="kt">DescendantStruct</span><span class="p">:</span> <span class="kt">ParentProtocol</span> <span class="p">{}</span>

<span class="k">let</span> <span class="nv">descendant</span><span class="p">:</span> <span class="kt">DescendantStruct</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="k">let</span> <span class="nv">parent</span><span class="p">:</span> <span class="kt">ParentProtocol</span> <span class="o">=</span> <span class="n">descendant</span> <span class="k">as</span> <span class="kt">ParentProtocol</span>
</code></pre></div></div>
<pre>
<span style="color:red">Value of type 'DescendantStruct?' does not conform to 'ParentProtocol' in coercion</span>
</pre>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//class, protocol 테스트</span>
<span class="kd">protocol</span> <span class="kt">ParentProtocol</span> <span class="p">{}</span>
<span class="kd">class</span> <span class="kt">DescendantClass</span><span class="p">:</span> <span class="kt">ParentProtocol</span> <span class="p">{}</span>

<span class="k">let</span> <span class="nv">descendant</span><span class="p">:</span> <span class="kt">DescendantClass</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="k">let</span> <span class="nv">parent</span><span class="p">:</span> <span class="kt">ParentProtocol</span> <span class="o">=</span> <span class="n">descendant</span> <span class="k">as</span> <span class="kt">ParentProtocol</span>
</code></pre></div></div>

<pre>
<span style="color:red">Value of type 'DescendantClass?' does not conform to 'ParentProtocol' in coercion</span>
</pre>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//class 테스트</span>
<span class="kd">class</span> <span class="kt">ParentClass</span> <span class="p">{}</span>
<span class="kd">class</span> <span class="kt">DescendantClass</span><span class="p">:</span> <span class="kt">ParentClass</span> <span class="p">{}</span>

<span class="k">let</span> <span class="nv">descendant</span><span class="p">:</span> <span class="kt">DescendantClass</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="k">let</span> <span class="nv">parent</span><span class="p">:</span> <span class="kt">ParentClass</span> <span class="o">=</span> <span class="n">descendant</span> <span class="k">as</span> <span class="kt">ParentClass</span>

</code></pre></div></div>

<pre>
<span style="color:red">Value of optional type 'DescendantClass?' must be unwrapped to a value of type 'DescendantClass'</span>
</pre>

<p>세가지 경우 모두 컴파일러에서 오류를 띄웠다.
Optional 타입을 Any타입으로 캐스팅 하는 것은 <a href="https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html">Swift 공식문서</a> 맨 밑에도 나와있기는 하다. 그런데 왜 가능하게 한걸까?</p>

<p> </p>
<h1 id="이-궁금증에-대한-해답은-아래-링크를-참조하도록-하자">이 궁금증에 대한 해답은 아래 링크를 참조하도록 하자.</h1>
<p><a href="https://stackoverflow.com/questions/34644128/why-non-optional-any-can-hold-nil/34644253">Why non optional Any can hold nil? - StackOverflow</a>
<a href="https://blog.yousoro.moe/archives/356">Non-Optional Any가 nil인지 체크하기</a>
<a href="https://forums.swift.org/t/casting-from-any-to-optional/21883/2">Casting from Any to Optional</a></p>
:ET