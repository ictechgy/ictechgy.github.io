I"oO<p>VMware 껐다가 다시 키니 사용자 계정을 생성한 것들이 나온다. 학원에서도, 집에서도 내가 만들었던 계정들 목록이 보인다.
comment를 만들지 않아도 뜨는건지 아니면 꼭 생성해야 뜨는건지.(아니면 코멘트 생성하면 해당 코멘트명으로 계정명이 보이는지)
itbank라는 계정은 dust라는 코멘트를 가지고 있는데 VMware에서 로그인 할 때 dust라는 이름으로 보인다..</p>

<p>실습
/etc/skel 디렉터리가 기본 skel 디렉터리임
별도로 /jongnoskel 디렉터리를 생성하여 사용자 user9을 생성하기
(조건 /jongnoskel 디렉터리를 생성할 때 하위에 별도의 bye라는 파일을 생성
/etc/skel 디렉터리 자체를 복사해서 이름 바꾸어서 작업하지 않고 별도의 skel 디렉터리를 생성)</p>

<p>useradd -mk /jongnoskel /etc/skel user9
안됨. useradd에 대한 옵션설명들 나옴</p>

<p>연계연산자 | 사용?
useradd -mk /etc/skel|/jongnoskel user9
역시나 안됨</p>

<p>useradd -mk /etc/skel»/jongnoskel user9
안됨</p>

<p>useradd -m /etc/skel -k /jongnoskel user9
안됨
→ 아마 -m은 home과 관련되어있는거라서.. 주축같은 느낌으로 -m은 /etc/skel 지정해주고 추가적으로 -k로 /jongnoskel 지정해준건데 안됨</p>

<p>useradd -b /etc/skel -k /jongnoskel user999
useradd: -k 플래그는 -m 플래그와 함께 사용해야 합니다</p>

<p>useradd -b /etc/skel -mk /jongnoskel user9
→ 생성은 됨. 
-b :  base directory for the home directory of the new account
ls -l /home/user9 했는데 해당 디렉토리 못찾았다..
find / -name user9 명령어로 해당 디렉토리 어디있는지 찾아봄
/etc/skel/user9
/var/spool/mail/user9
→ 아.. 저곳에 생겼네.. -b는 -d랑 똑같네.. 다만 -d로 다른 디렉토리 지정했다면 /etc/skel/user9 처럼 끝까지 써야했겠지만 -b는 그냥 그 하위에 만들어버리네</p>

<p>useradd -mk /etc/skel+/jongnoskel user99
작동되길래 좋아했는데..
 ls -l /home/user99
합계 0
→ + 쓴건 무슨 의미가 된거지.. 그냥 문자열 두개 합친것처럼 된건가? 즉 /etc/skel/jongnoskel이라고 쓴거랑 동일하게 된건가?</p>

<p>useradd -mk /etc/skel&amp;&amp;/jongnoskel user999
역시나 옵션설명들 뜸</p>

<p>-k옵션은  -m옵션과 같이 있어야 쓸 수 있다. -m옵션은 홈디렉토리가 없다면 홈 디렉토리를 생성하겠다는 옵션이다. → 굳이 이렇게 둔 이유는 뭐지? 홈디렉토리 생성은 당연한거 아닌가? 흠.. 만약 홈 디렉토리가 미리 생성되어있다면? 그럼 그건 그거대로 홈 디렉토리 이미 존재한다고 생성 안될게 뻔한거 아닌가? 
-m : 유저의 홈 디렉토리가 존재하지 않는다면 생성한다.
흠.. 뭐랄까 -mk라고 쓰면 skel의 내용들을 홈 디렉토리 하위에 넣겠다는 말처럼 되는건가</p>

<p>선생님 해설
아 그냥 /etc/skel하위 파일들을 /jongnoskel하위로 복사하는 식으로 풀이하셨다.
나는 useradd -mk 로 유저생성하면서 skel디렉토리 지정시 다중지정이 가능할 줄 알고 그 부분에 초점을 맞춰서 풀려고 했다.. 다중지정은 불가능한거같은데?(만약 가능하다고 하더라도 skel하위의 파일명들 등이 충돌이 일어난다면 처리는 복잡할 것이다.)</p>

<p>ls -al /etc/skel
합계 24
drwxr-xr-x.   4 root  root   108  5월 23 09:26 .
drwxr-xr-x. 135 root  root  8192  5월 23 09:29 ..
-rw-r–r–.   1 root  root    18  9월  7  2017 .bash_logout → 로그아웃시 기록남는 파일
-rw-r–r–.   1 root  root   193  9월  7  2017 .bash_profile → 환경변수파일
-rw-r–r–.   1 root  root   231  9월  7  2017 .bashrc → alias 등 환경변수 파일
drwxr-xr-x.   4 root  root    39  9월 25  2017 .mozilla → 디렉토리
drwx——.   2 user9 user9   17  5월 23 09:26 user9 → -b 설정으로 잘못 만든 홈디렉토리
-rw-r–r–.   1 root  root     0  5월 21 11:40 younghoon</p>

<p>cp /etc/skel/.* /jongnoskel
cp: omitting directory <code class="highlighter-rouge">/etc/skel/.'
cp: omitting directory </code>/etc/skel/..’
cp: omitting directory `/etc/skel/.mozilla’
→ 디렉토리들은 복사되지 않음</p>

<p>cp -r /etc/skel/.mozilla /jongnoskel
→ .mozilla 디렉토리까지 복사</p>

<p>만약 처음부터 cp -r /etc/skel/.* /jongnoskel 을 하게 되면 
. 즉 현재 디렉토리의 모든것과 .. → 상위디렉토리 /etc까지 모두 /jongnoskel 하위에 복사하게 된다. 따라서 주의하도록 한다.. 복사를 하는 기준같은건 ls -al 로 나온 결과에서 나온 목록 이름을 보고 복사를 하게 되는 것 같다.. 설마 . 과 .. 까지 신경쓰게 될줄이야</p>

<p>touch /jongnoskel/bye 까지 만든다.</p>

<p>useradd -mk /jongnoskel user9 로 만들어주면 완료된다.</p>

<p>집에서 따로 혼자 했을때 내가 한 방법은..
cp -r /etc/skel/. /jongnoskel 로 /etc/skel 하위 파일 및 디렉토리를 전부 한번에 /jongnoskel 하위로 복사시켜서 풀었다.
만약 저기서 온점을 쓴게 아닌 * 을 썼다면 숨김파일들은 복사되지 않았을 것이다.
또한 .* 을 썼다면 .으로 시작하는 파일 및 디렉토리들만 복사되는게 아니라 ‘.’ 과 ‘..’에 해당하는 현재 디렉토리 및 상위디렉토리까지 모두 복사됐을 것이다.</p>

<p>. 온점, * 별, .* 쩜별 잘 구분해서 쓰도록 하자</p>

<p>skel에 대한 확인은 해당 사용자의 홈 디렉토리 하위를 보자.
tail /etc/passwd 로는 어떤 skel이 담겨있는지는 볼 수 없다.
-mk는 마치 뼈대를 다른 걸 쓰겠다는 것. (남자만들거면 남자뼈대쓰고 여자만들거면 여자뼈대쓰고..등)</p>

<p>이미 생성한 경우 해당 홈디렉토리의 구성물인 skel을 바꾸는건 다시 만들어야한다.(계정 삭제 후 재생성)
만약 skel의 개별적파일만 가져다가 넣고싶다면 skel에서 해당 홈 디렉토리 하위로 원하는 파일이나 디렉토리를 복사해서 넣어놓고 UID와 GID쪽 바꿔줘야 한다.(권한부분에 대한 것을 알아야한다고 하심)</p>

<p>→ 나는 -mk로 스켈 디렉토리 두개를 다 잡을 수 있을 줄 알았다.</p>

<p>skel에 아무것도 없어도 useradd는 되긴 함.. 근데 만약 안에 아무것도 없다면.. 정상적인 기능은 할 수 없음. 안만들어지지는 않는다.
안만들어지는경우는 오직 어법상 안맞는경우에만 안만들어진다.
→ 따라서 항상 만든 뒤에는 확인</p>

<p>만약 잘 안만들어져서 홈디렉토리 하위에 아무것도 없다면 환경변수고 뭐고 아무것도 없을듯. 그러면 해당 계정으로 로그인시 작동되지 않을 것은 무엇이 있을까? 로그인 자체는 될까? 비밀번호는 기본적으로 있어야 로그인은 되겠다만</p>

<p>실습2
결과만 보고 이러한 결과가 나오도록 생성하여라
/dansungsa/test1(사용자)/public_html(자동 생성 디렉토리)</p>

<p>ls -ld /dansungsa로 일단 해당 디렉토리 유무 확인
mkdir /dansungsa
ls -ld /dansungsa</p>

<p>mkdir /etc/skel/public_html
ls -al /etc/skel</p>

<p>useradd -d /dansungsa/test1 test1
→ 또는 useradd -b /dansungsa test1 이라고 할 수도 있다.</p>

<p>tail /etc/passwd로 계정생성 확인
ls -alR /dansungsa 로 하위 전부 확인 또는 ls -al /dansungsa/test1 로 내부 skel 확인
-F옵션은 파일명 뒤에 해당 파일의 속성을 간략하게 보여주는거였지..</p>

<p>/dansungsa → 생성가장 윗경로.. /home과 같은 존재
test1 → 홈디렉토리명
public_html → 자동생성이라고 했으니 skel파일에 넣으면 되는 것. 생성 후에 mkdir로 직접 만든게 아니다.
/jongnoskel을 이용하든 /etc/skel을 이용하든</p>

<p>만약 /jongnoskel을 이용한다면
mkdir /jongnoskel/public_html
ls -al /jongnoskel</p>

<p>useradd -d /dansungsa/test1 -mk /jongnoskel test1</p>

<p>만약 /dansungsa 디렉토리등을 만들지 않고 useradd를 하면 계정만 만들어지기는 한다. 다만 그 계정은 홈디렉토리가 없을 것.. 만약 이후에 /dansungsa를 만들어도 뭐 없겠지. /dansungsa/test1을 따로 만들어주고 안에 skel까지 넣어주고 권한까지 다 바꿔준다면 작동할 것 같다. → 그냥 계정 삭제하고 재생성하는게 편할 듯</p>

<p>\ 를 쓰면 긴 문장 몇줄에 걸쳐서 쓸 수도 있는 듯. 파이썬쪽에서도 되는 기능이었던거같은데.. C언어 등 자바나 여러 프로그래밍언어용 프로그램들에서 사용가능하던 ..
\입력하고 엔터치면 다음칸에 입력할 수 있도록 뜨는데 거기에 ls 입력하고 엔터치니까 그냥 ls친것과 동일한 결과가 나온다. 즉 다음줄에 명령문 작성하고 싶을 때 쓰는 기호
Alt + Enter랑 똑같은 기능..</p>

<p>기본값 설정 → /etc/login.defs 또는 /etc/default/useradd 같은 파일을 건드리려나
왜 홈디렉토리는 항상 /home하위에 만들어지며 쉘은 항상 bash쉘이 기본인지 등.</p>

<p>useradd -D와 /etc/default/useradd파일 설명
(useradd -Default), /etc/default쪽에는 grub와 nss라는 파일도 있는데 몇몇 명령어와 같은 것들에 대한 기본값들이 적혀있는 파일이 있는 것 같다.</p>

<p>cat /etc/default/useradd와 useradd -D는 결과가 같다</p>

<p>사용자 생성과 관련해서 기본 설정들이 잡혀있다. login.defs는 더 큰 개념</p>

<p>useradd -D
사용자 계정 생성시 기본설정 정보를 출력</p>

<p>useradd -D [option] [argument]
계정명을 쓰는게 아니다. 설정을 보거나 바꾸는 명령어이다.</p>

<p>항목
GROUP=100
→ 사용자 계정 생성시 사용자 계정이 기본적으로 소속될 그룹의 GID를 지정</p>

<p>cat etc/group을 보면..
users:x:100:
100이라는 GID에 해당하는건 users 라고 되어있다.
→ 그럼 사용자 계정 생성시 users라는 그룹에 기본적으로는 포함되는건지 아니면 뭐지..</p>

<p>itbank라는 그룹의 GID는 1000인데 그러면 이 GROUP=100 기본값을 1000이라고 바꿔버리면 그 이후에 생성되는 모든 사용자 계정은 기본적으로 itbank 그룹에 포함되게 되는건가. 아니면 itbank그룹에 포함되면서 각자의 고유한 그룹을 또 생성하게 되는걸까</p>

<p>기본값을 바꾸고 싶다면 -D 쓴 다음에 옵션을 쓰도록 한다.
option
-g</p>

<p>useradd -D -g [값] → useradd 의 Default값 중에서 나는 gid쪽을 바꾸겠다!</p>

<p>HOME=/home
→ 사용자 계정 생성시 사용자 계정의 홈 디렉토리 경로(위치)
option
-b : base 변경 → useradd -D -b 디렉토리경로</p>

<p>INACTIVE=-1
→ 사용자 계정을 생성한 뒤에 사용자 계정의 비밀번호가 만료됐다면 사용자 계정이 사용 불가능하게 되는 날까지의 텀을 지정 
argument(인자값)
-1 : 비활성화(비밀번호가 만료되더라도 계정은 삭제되지 않음. 비밀번호 변경시 재사용 가능? → 관리자계정으로 비밀번호 바꿔줘야하는지 아니면 본인 계정 스스로 로그인하면서 변경이 가능한지.. )
0: 사용자 비밀번호가 만료되면 계정 바로 사용 불가능
1 이상 : 비밀번호 만료 후 지정한 숫자만큼 일수가 지나면 사용자 계정 사용불가능(삭제되는건가?)
option
-f</p>

<p>EXPIRE=
→ 사용자 계정 생성 시 사용자 계정의 비밀번호 만료일을 지정
argument(인자값)이 없으므로 무제한
option
-e
-e 옵션 사용시 인자값 형식은 YYYYMMDD 으로 사용</p>

<p>즉, useradd -D -e YYYYMMDD 형식으로 써야하는 듯</p>

<p>SHELL=/bin/bash
→ 사용자 계정 생성시 사용자 계정의 기본 쉘을 지정
option
-s : useradd -D -s [쉘경로지정]</p>

<p>SKEL=/etc/skel
→ 사용자 계정 생성시 사용자 계정의 홈 디렉토리로 복사 될 환경변수 파일들이 저장된 디렉토리를 지정
option이 없음. 즉 useradd -D 뒤에 옵션추가하여 변경할 수 있는 값이 아니다.
 → vi로 /etc/default/useradd를 직접 편집해줘야한다.</p>

<p>CREATE_MAIL_SPOOL=yes
→ 사용자 계정 생성시 사용자 계정의 메일파일 생성여부
참고로 생성되는 메일파일의 경로는 /var/spool/mail 디렉토리 하위
ls -l /var/spool/mail 로 확인 가능
이것 역시 option이 없음 → vi로 useradd파일 편집필요</p>

<p>useradd -D -b /jongno → 이제 홈디렉토리는 /jongno 하위에 생성(만약 /jongno디렉토리 없어도 명령문은 실행되므로 주의하도록 한다. 그 상태로 계정생성했다면 그 계정들은 홈 디렉토리가 없는 계정일 것)
useradd user10
tail /etc/passwd 로 확인
이렇게 useradd로 사용자 계정을 생성 할 때 -d 또는 -b 옵션을 써서 일일히 사용자 계정의 홈 디렉토리를 지정해줘도 되지만 기본적 설정파일을 수정해서 홈디렉토리 생성경로를 변경해줘도 된다</p>

<p>실습2 (조건! 사용자 계정을 생성 할 때 옵션 쓰지않고 기본 생성)
SHELL=/bin/csh : 문서를 이용한 변경
→ vi /etc/default/useradd 로 문서 열기
SHELL 항목에 가서 /bin/bash로 되어있는 것을 /bin/csh로 변경</p>

<p>HOME=/kgitbank : 명령어 이용한 변경
→ ls -ld /kgitbank로 해당 디렉토리 있는지 확인
mkdir /kgitbank로 디렉토리 생성
useradd -D -b /kgitbank로 변경
cat /etc/default/useradd 또는 useradd -D 로 변경 확인</p>

<p>SKEL=/skel/jongno : 문서를 이용한 변경 → 애초에 문서를 이용해서만 변경가능한 항목
→ vi /etc/default/useradd 로 파일을 열고 SKEL 항목에 가서 바꿔주기
ls -ld /skel 로 디렉토리 존재여부 확인
mkdir /skel 로 디렉토리 생성
cp -r /etc/skel /skel/jongno 로 기존 skel디렉토리 자체를 jongno디렉토리로 이름 변경하며 복사하기</p>

<p>User : user11
→ useradd user11</p>

<p>useradd 에서 -D 는 Default를 말하는 것같음
-b 는 base</p>

<p>vi로 파일 열고 :se nu 한 뒤에 :6 으로 줄 이동해서 값 변경 후 :wq로 저장 후 종료하는 방식으로 편하게.
→ 여러가지 명령모드 단축키 활용가능</p>

<p>skel을 만들 때 /skel 하위에 jongno디렉토리가 존재하지 않는다면
cp -r /etc/skel /skel/jongno 로 해도 되고</p>

<p>만약 /skel/jongno 디렉토리가 이미 존재한다면
cp -r /etc/skel /skel/jongno 로 하면 /skel/jongno/skel 로 만들어진다. 즉 skel디렉토리가 jongno디렉토리 하위로 통째로 들어가게 됨.. 따라서
cp -r /etc/skel/. /skel/jongno 로 해주면 된다.</p>

<p>→ 엥? 그냥 어떤 디렉토리에서 <em>을 쓰게 되면 그건 숨김파일은 제외하고 지정하는거네. 아예 다 지정해버리고 싶다면 온점. 을 써야하는 듯
따라서 위에서 /skel하위에 /jongno디렉토리가 이미 존재한다면 
cp -r /etc/skel/</em> /skel/jongno 로 쓰면 안될 듯. 꼭 온점써야할듯..
숨김파일은 *로는 지정되지 않는다. 전부다 지정하려면 온점 사용</p>

<p>이렇게 기본설정파일을 조작함으로서 useradd에서 옵션 -d -mk -s들을 안쓰고 생성가능
원래대로였다면 useradd -s /bin/csh -d /kgitbank/계정명 -mk /skel/jongno 계정명</p>

<p>변경했던 것들을 원래대로 되돌리자
useradd -D -s /bin/bash -b /home
vi /etc/default/useradd 로 skel부분 /etc/skel로 다시 변경하자</p>

<p>사용자 계정 수정 → /etc/passwd나 /etc/shadow 파일을 vi로 직접 수정 가능? 파일이 열리긴 하는데..
useradd와 사용형식이 동일함. (마치 cp와 mv 형식 비슷하듯)</p>

<p>사용형식
usermod [option] [argument] 계정명
mod → modify</p>

<p>option
-u : UID를 수정</p>

<p>usermod -u 6999 user1
tail /etc/passwd로 확인
→ GID는 변경되지 않는다.</p>

<p>-g : 그룹을 배운 후에 작업 → GID변경??
-G : 그룹을 배운 후에 작업
→ useradd 에서도 -g 옵션은 우리가 그룹을 배운 후에 작업하기로 했었음. 전부 GID 그룹쪽과 관련되있는 옵션인 것으로 추정됨. 아직까지 그룹이 뭔지 어떤 역할을 하며 어디에 쓰이는지 감이 잘 잡히지 않는다. 리눅스에서의 그룹이라.. rwx쪽말고 뭐 더 있는가?</p>

<p>-c : comment를 수정</p>

<p>usermod -c byeworld user2
tail /etc/passwd 로 확인</p>

<p>usermod -c hiworld user3
→ 이미 코멘트가 있는 것도 수정 가능</p>

<p>-s : Shell을 수정
usermod -s /bin/sh user7
→ bash에서 Bourne Shell로 변경</p>

<p>-l : 사용자 계정명 수정
usermod -l userfive user5
user5라는 계정명 가지고 있는 것의 계정명을 userfive로 변경
→ 엇 바꾸니까 집에서는 userfive의 /etc/passwd에서의 위치가 가장 맨 아래로 가졌다.. 이후에 useradd 하면 저 번호 뒷번호로 생성되려나?</p>

<p>-d : 사용자 계정의 홈 디렉토리명을 수정하거나 사용자 계정의 홈 디렉토리 경로를 수정
usermod -d /home/usernine user9 → /etc/passwd에서는 반영 됨
하지만 ls -l /home 으로 확인해보면.. 홈 디렉토리에서 이름이 바뀌어있지 않다.. 그대로 user9으로 존재한다. 
계정의 정보와 실제 디렉토리 이름과 일치하지 않는다.
따라서 /home 하위의 user9을 직접 바꿔줘야 한다.
mv /home/user9 /home/usernine 으로 변경해야한다.
(내가 사는 실제 집과 부동산 상의 집 주소가 같아야하듯이)
→ 같지 않다면 무슨 문제가 발생하는가? 계정의 홈 디렉토리가 없는 것으로 인식이 되는가?</p>

<p>user1의 /home/user1 을 /kgitbank 하위로 옮기고 싶다
usermod -d /kgitbank/user1 user1
ls -l /kgitbank 로 확인 → 정보만 바뀌었을 뿐 실제적으로 옮겨지지 않았다.
mv /home/user1 /kgitbank 로 직접 디렉토리를 바꿔주자.(mv는 -r옵션 없어도 됨)
cp로는 하지 말자. 홈 디렉토리는 하나만 존재해야한다.
→ usermod 에 -b옵션은 없다.. useradd에서는 -b와 -d 가 비슷한듯 다르게 두개 존재하는데.</p>

<p>usermod는 약간 그냥 /etc/passwd쪽 파일 바꾸는 것 같은 느낌이 드는건 착각인가?</p>

<p>user2, user3, user4의 디렉토리를 /jongno 하위로 변경하자
→ usermod -d /jongno/user2 user2
usermod -d /jongno/user3 user3
usermod -d /jongno/user4 user4
확인은 tail /etc/passwd로</p>

<p>mv /home/user2 /home/user3 /home/user4 /jongno
확인은 ls -l /jongno로</p>

<p>사실은 home디렉토리 하위의 user 홈디렉토리 파일이 실제적으로 누구의 소유인지 확인 해주고 mv를 해줘야 하긴 한다. /home/user2 디렉토리가 진짜 user2 의 소유인지..</p>

<p>하지만 이렇게 경로 ‘정보’만 바꾸는게 아니라 실질적 홈디렉토리 자체도 이동시킬 수 있는 추가적 옵션이 존재한다.
-m옵션과 함께 사용해보는 방법.
usermod -m -d /dansungsa/user7 user7
-m이라는 옵션은 먼저 나와야한다.
실제 홈 디렉토리를 바꿔주면서 정보또한 바꾸는 방법. -m은 move home의 약어</p>

<p>다만 ls -ld /home/user7 으로 기존 홈 디렉토리 존재여부 확인하고.. 홈디렉토리 소유주와 일치하는지도 확인
옮긴 이후에는 ls -ld /dansungsa/user7 으로 옮겨진 것도 확인하고.. 당연히 tail /etc/passwd에서도 확인하고..</p>

<p>→ 그냥 -m옵션만 쓴다면..? 홈디렉토리만 위치바뀌고 정보는 반영 안되는건가</p>

<p>tail /etc/passwd로 계정정보 확인
/home/user8 및 /home/usernine 을 /dansungsa 하위로 옮겨보자
ls -ld /home/user8
ls -ld /home/usernine
→ 디렉토리 존재여부 확인</p>

<p>usermod -md /dansungsa/user8 user8
usermod -md /dansungsa/user9 user9
ls -ld /home/user8
ls -ld /home/usernine
ls -ld /dansungsa/user8
ls -ld /dansungsa/user9 
→ 이와같이 옮기면서 디렉토리명 변경도 가능하다.</p>

<p>계정삭제와 그룹에 대해 배울 것
→ userdel 이 계정 삭제 명령어
그룹에 대해 배우면 useradd 와 usermod에서 배우지 못한 옵션인 -g 및 -G에 대해서 배울 것 같다.</p>
:ET