I"3<p>Swift를 다시 공부하던 도중 기록하면 좋을만한 부분이 있어서 작성한다.</p>

<p>Any?, AnyObject? 같은 옵셔널이 아닌 Any, AnyObject 등에는 nil을 직접적으로 넣을 수 없다. 하지만 아래와 같은 경우에는 가능하다.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="k">let</span> <span class="nv">b</span><span class="p">:</span> <span class="kt">Any</span> <span class="o">=</span> <span class="n">a</span> <span class="k">as</span> <span class="kt">Any</span>   <span class="c1">//syntax error가 뜨지 않는다. 'Any?'로 쓰십시오!라고 뜰 줄 알았는데..</span>
</code></pre></div></div>
<p>b는 실질적으로 nil이지만 nil이 아닌 것처럼 보인다. 이런 부분에 있어 유의하도록 하자.</p>

<p>위와 같은 경우가 있을 수 있다는 것은 <a href="https://github.com/ReactiveX/RxSwift/blob/main/RxExample/Extensions/CLLocationManager%2BRx.swift">RxSwift Github - ‘CLLocationManager+Rx’ Example</a>을 통해 알았다.</p>

<p>맨 밑에</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">func</span> <span class="n">castOptionalOrThrow</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">resultType</span><span class="p">:</span> <span class="kt">T</span><span class="o">.</span><span class="k">Type</span><span class="p">,</span> <span class="n">_</span> <span class="nv">object</span><span class="p">:</span> <span class="kt">Any</span><span class="p">)</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">T</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">if</span> <span class="kt">NSNull</span><span class="p">()</span><span class="o">.</span><span class="nf">isEqual</span><span class="p">(</span><span class="n">object</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">nil</span>
    <span class="p">}</span>
		 <span class="c1">//NSNull: nil을 허용하지 않는 콜렉션에서 null value를 대표하는 싱글톤 오브젝트</span>
     <span class="c1">//nil이지만 nil이 아닌것처럼 쓸 수 있다는 건가?</span>

    <span class="k">guard</span> <span class="k">let</span> <span class="nv">returnValue</span> <span class="o">=</span> <span class="n">object</span> <span class="k">as?</span> <span class="kt">T</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="kt">RxCocoaError</span><span class="o">.</span><span class="nf">castingError</span><span class="p">(</span><span class="nv">object</span><span class="p">:</span> <span class="n">object</span><span class="p">,</span> <span class="nv">targetType</span><span class="p">:</span> <span class="n">resultType</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">returnValue</span>
<span class="p">}</span>
</code></pre></div></div>
<p>위와 같은 함수가 있는데 ‘nil일 수 있는 인자를 Any타입의 object로 받는 것’과 내부에서 ‘nil 체크를 NSNull().isEqual()로 하는 것’을 보고.. 처음에 굉장히 혼란스러웠다. 왜 object 파라미터가 Any?타입이 아닌 Any일까 하면서.. (왜인지는 아직도 잘 모르겠다.)</p>

<p>delegate.methodInvoked()에 의해 메소드 파라미터들은 Any로 캐스팅되고 [Any] 배열로 반환된다. 따라서 특정 파라미터는 Any타입이라고 보여도 사실은 nil일 수 있다. (이를테면 CLLocationManagerDelegate - didFinishDeferredUpdatesWithError의 두번째 파라미터는 Error? 옵셔널인데, Any로 캐스팅되어도 사실 nil일 수 있다는 것)</p>
:ET